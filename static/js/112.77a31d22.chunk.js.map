{"version":3,"file":"static/js/112.77a31d22.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","page/LoginPage.jsx","../node_modules/yup-password/index.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Container} from 'components/BasicsStyled/BasicsStyled.styled'\n\n\nexport const ContainerForm = styled(Container)`\nwidth: 340px;\n`;\n\n","import { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport {\n  Button,\n  Form,\n  Input,\n  Label,\n  Messege,\n} from 'components/BasicsStyled/BasicsStyled.styled';\nimport { ContainerForm } from './LoginForm.styled';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport YupPassword from 'yup-password';\n\nYupPassword(yup); // extend yup\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const schema = yup\n    .object({\n      email: yup.string().email().required(),\n      password: yup.string().password().required(),\n    })\n    .required();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({ resolver: yupResolver(schema)});\n\n  const onSubmit = data => {\n    dispatch(logIn(data));\n    reset();\n  };\n\n  return (\n    <ContainerForm>\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <Label>\n          Email\n          <Input defaultValue=\"\" {...register('email')} />\n          <Messege>{errors.email?.message}</Messege>\n        </Label>\n\n        <Label>\n          Password\n          <Input type=\"password\" defaultValue=\"\" {...register('password')} />\n          <Messege>{errors.password?.message}</Messege>\n        </Label>\n\n        <Button type=\"submit\">LogIn</Button>\n      </Form>\n    </ContainerForm>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from \"components/LoginForm\"\n\n\nconst LoginPage = () => {\n  return(\n    <LoginForm/>\n  )\n}\n\nexport default LoginPage","'use strict'\n\n// pluralize\nconst p = function (word, num) {\n    return num === 1 ? word : `${word}s`\n}\n\nconst isNullOrUndefined = function (value) {\n    return value === null || value === undefined\n}\n\nfunction minLowercase(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} lowercase ' + p('letter', length)\n    return this.test({\n        name: 'minLowercase',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return isNullOrUndefined(value) || (value.match(/[a-z]/g) || []).length >= length\n        }\n    })\n} // minLowercase()\n\nfunction minUppercase(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} uppercase ' + p('letter', length)\n    return this.test({\n        name: 'minUppercase',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return isNullOrUndefined(value) || (value.match(/[A-Z]/g) || []).length >= length\n        }\n    })\n} // minUppercase()\n\nfunction minNumbers(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} ' + p('number', length)\n    return this.test({\n        name: 'minNumber',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return isNullOrUndefined(value) || (value.match(/[0-9]/g) || []).length >= length\n        }\n    })\n} // minNumber()\n\nfunction minSymbols(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} ' + p('symbol', length)\n    return this.test({\n        name: 'minSymbol',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return isNullOrUndefined(value) || (value.match(/[^a-zA-Z0-9\\s]/g) || []).length >= length\n        }\n    })\n} // minSymbol()\n\nfunction minRepeating(length = 2, message) {\n    const msg = message || '${path} must not contain sequences of more than ${length} repeated ' + p('character', length)\n    return this.test({\n        name: 'minRepeating',\n        exclusive: true,\n        message: msg,\n        params: { length: length },\n        test(value) {\n            return isNullOrUndefined(value) || ! new RegExp(`(.)\\\\1{${length},}`).test(value)\n        }\n    })\n} // minRepeating()\n\nfunction minWords(length = 2, message) {\n    const msg = message || '${path} must contain at least ${length} ' + p('word', length)\n    const rx = new RegExp('[a-zA-Z0-9]')\n    return this.test({\n        name: 'minWords',\n        exclusive: true,\n        message: msg,\n        params: { length: length },\n        test(value) {\n            return isNullOrUndefined(value) || value.split(' ').filter(v => !! v && rx.test(v)).length >= length\n        }\n    })\n} // minWords()\n\nfunction password() {\n    return this\n        .min(8)\n        .max(250)\n        .minLowercase(1)\n        .minUppercase(1)\n        .minNumbers(1)\n        .minSymbols(1)\n} // password()\n\nfunction setup(yup) {\n    yup.addMethod(yup.string, 'minLowercase', minLowercase)\n    yup.addMethod(yup.string, 'minUppercase', minUppercase)\n    yup.addMethod(yup.string, 'minNumber', minNumbers)\n    yup.addMethod(yup.string, 'minNumbers', minNumbers)\n    yup.addMethod(yup.string, 'minSymbol', minSymbols)\n    yup.addMethod(yup.string, 'minSymbols', minSymbols)\n    yup.addMethod(yup.string, 'minRepeating', minRepeating)\n    yup.addMethod(yup.string, 'minWords', minWords)\n    yup.addMethod(yup.string, 'password', password)\n}\n\nmodule.exports = setup\n"],"names":["ContainerForm","styled","Container","YupPassword","yup","dispatch","useDispatch","schema","email","required","password","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","reset","onSubmit","data","logIn","defaultValue","message","type","p","word","num","isNullOrUndefined","value","undefined","minLowercase","length","msg","this","test","name","exclusive","params","match","minUppercase","minNumbers","minSymbols","minRepeating","RegExp","minWords","rx","split","filter","v","min","max","module","exports","addMethod","string"],"sourceRoot":""}